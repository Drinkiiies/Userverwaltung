#Script für SuS-verknüpfung mit Manager gemäss ImportCSV File. Im gleichen Zuge werden die Attribute (Schule & Titel) hinterlegt
#
#
#
#
#
#Versionen
#06.04. Script erstellt. Offen: Wenn mehre LP im Filter wird nur der erste genommen (gleiche Namen).
#07.04  Ergänzung Berg und Breite. Prüfung @schmumir.ch braucht noch logicergänzungen...
#22.04. Ergänzung für Planner. Import von File nötig gemäss ANleitung https://docs.microsoft.com/en-us/office365/planner/prerequisites-for-powershell
#15.05. Ergänzung TecTeam Mitglieder
#
################# Starto #######################################

#logging for lazy ppl
Start-Transcript -Path "$($PSScriptRoot)\log.txt" -Append

#Env beacause onedrive
#$env:PSModulePath=$env:PSModulePath+";"+'C:\Users\micha\OneDrive - PSAH\Dokumente\WindowsPowerShell\Modules'
#Modules
Install-Module MSOnline -Scope AllUsers 
Install-Module AzureAD -Scope AllUsers
Import-Module AzureAD
Import-Module MSOnline



#Planner Module


if(Test-Path ("$($PSScriptRoot)\Powershell Planner\plannertenantadmin.psm1" -join "")) {     

     $Dateipfad = "$($PSScriptRoot)\Powershell Planner"
     $Dateipfad = $Dateipfad -replace '["]'
     Unblock-File -LiteralPath ($Dateipfad + "\plannertenantadmin.psm1" -join "") -ErrorAction SilentlyContinue
     Unblock-File -LiteralPath ($Dateipfad + "\microsoft.identity.client.dll" -join "")  -ErrorAction SilentlyContinue
     Import-Module ($Dateipfad + "\plannertenantadmin.psm1" -join "")

}Else {
        
        do{
        $Dateipfad = ""
        Read-Host -Prompt "Bitte Ordnerpfad für Plannermodul angeben. Download: https://docs.microsoft.com/en-us/office365/planner/prerequisites-for-powershell" -OutVariable Dateipfad
        $Dateipfad = $Dateipfad -replace '["]'
        Unblock-File -LiteralPath ($Dateipfad + "\plannertenantadmin.psm1" -join "") -ErrorAction SilentlyContinue
        Unblock-File -LiteralPath ($Dateipfad + "\microsoft.identity.client.dll" -join "")  -ErrorAction SilentlyContinue
        Import-Module ($Dateipfad + "\plannertenantadmin.psm1" -join "")
        } While ((Test-Path ($Dateipfad + "\plannertenantadmin.psm1" -join "")).Equals($false))
}


#Services Verbinden
$credential = Get-Credential
Connect-AzureAD -Credential $credential
Connect-MsolService -Credential $credential

#Output verstecken
function Out-Default {}

#Import CSV Datei
$CSVPath = Read-Host "CSV Pfad"
$CSVPath = $CSVPath -replace '["]'



#import der Daten ohne leerzeilen oder ohne schumir infos
$LODaten = Import-Csv -Path $CSVPath -Delimiter ";"  | Where-Object { $_.PSObject.Properties.Value -ne '' -and $_."SchumirUser" -ne ''}
$lodatenmenge = $LODaten.Count

Write-Host "Anzahl Datensätze: $lodatenmenge" 
sleep 2

#Schulobjekte, welche von Feld "Schulhaus" kommen
$schulenPSAH = @("PSAH")
$schulenOMR = @("OMR")    
$schulenPSBE = @("PSBE") 
$schulenPSBA = @("PSBA") 



 

    #verifizierung und ergänzung von @schumir.ch zu den Usernamen
    if(($LODaten.'SchumirUser' -match "@schumir.ch").Count -lt ($LODaten.'SchumirUser').Count ){

    Write-Host "Einträge mit @schumir.ch ergänzen falls nötig. Folgende Daten werden verwendet"
    $LODaten.'SchumirUser' -notmatch "@schumir.ch"  | foreach {$_ + "@schumir.ch"} -OutVariable Schumirusername
        
    Write-Host $Schumirusername -ForegroundColor Green -Separator `n



    sleep 5

 
    } else{
  
    Write-Host -ForegroundColor Green "Bitte @schumir.ch entfernen. Die Logic muss erweiteret werden." 
    exit 0 
    }



#für jeden Datensatz im CSV den User abfüllen


#####
# Update von User Property.
#
######

foreach ($User in $Schumirusername){

    
    #Validierung ob User Existiert
    $MSOLUser = Get-MsolUser -UserPrincipalName $User -ErrorAction SilentlyContinue
    If ($MSOLUser -ne $Null) { 
    
        Write-Host "User $User gefunden, Anpassungen werden durchgeführt"

        #weitere Daten aus dem LO Import holen. das @schumir.ch muss wieder entfernt werden.
        $cutuser = $User -replace "@.*"
        $Userzusatzdaten =  $LODaten | select "SchumirUser","Schulhaus","LPVorname","LPNachname" | ? {$_."SchumirUser" -eq "$cutuser"}
        #wird später für den Manager verwendet
        $Userobjectid = Get-MsolUser -UserPrincipalName $User | select ObjectId

        #Setzt Titel SuS in den Userproperties
        set-msoluser -UserPrincipalName $User -Title "SuS"
        
        #Setzt Setting für Planner
        Set-PlannerUserPolicy -UserAadIdOrPrincipalName $User -BlockDeleteTasksNotCreatedBySelf $true

        #prüfung in welcher Schule die Kinder gehen und setzen des Office Properties
        switch($true) {
                ($schulenPSAH).Contains($Userzusatzdaten.Schulhaus) {
                    
                    Write-Host "PSAH SuS" 
                    #Setzt Office zu PSAH
                    set-msoluser -UserPrincipalName $User -Office "PSAH" 

                }
                ($schulenOMR).Contains($Userzusatzdaten.Schulhaus){

                    Write-Host "OMR SuS"
                    #Setzt Office zu OMR
                    set-msoluser -UserPrincipalName $User -Office "OMR"  
                
                }
                ($schulenPSBE).Contains($Userzusatzdaten.Schulhaus){

                    Write-Host "PSBE SuS" 
                    #Setzt Office zu PSBE
                    set-msoluser -UserPrincipalName $User -Office "PSBE"  
                
                }
                ($schulenPSBA).Contains($Userzusatzdaten.Schulhaus){

                    Write-Host "PSBA SuS" 
                    #Setzt Office zu PSBA
                    set-msoluser -UserPrincipalName $User -Office "PSBA" 

                }


                default {Write-Host -BackgroundColor Red "Schule konnte nicht gesetzt werden für $User"}
           }

        #Verbindet den Vorgesetzten
        #Zusammenführen der Klassenlehrpersondaten
        $KlassenLP = @($Userzusatzdaten."LPVorname",$Userzusatzdaten."LPNachname")
        
        #Suchen (mehrere möglich)       
        $Manager = Get-MsolUser -SearchString "$KlassenLP" -All | select ObjectId,Title,Displayname,SignInName,UserType -OutVariable ListeKlassenLP

        #Filtern ob mehr als 1 Manager
        if($Manager.PSObject.Properties.Value -ne '' -and $Manager.PSObject.Properties.Value -eq 1) {    

            Set-AzureADUserManager -ObjectId ($Userobjectid).ObjectId -RefObjectId ($Manager.ObjectId).Guid
            $Managername = $Manager.DisplayName
            Write-Host "$User hat nun den Manager -- $Managername -- hinterlegt"  -ForegroundColor Green -Separator `n

            $KlassenLP = $null
            $Manager = $null
            $Userobjectid = $null
            $Userzusatzdaten
            $LPdaten = $null
            $Managername = $null
            }else {

            Write-Host "Michael war zu Faul für diesen Fall. Mehrere LP haben den gleichen Namen, LP existiert so nicht (namenswechsel?). Michael motivieren weiterzumachen."
            

            }



        } 
    
    
    
    
    Else {
        
        Write-Host "$User nicht in der AAD gefunden. Bitte errors.txt prüfen im Scriptverzeichnis"
        $User | Out-File "$($PSScriptRoot)\errors.txt" -Append
        
        }

}

#Ergänzung Userproperty von der M365 TecTeam Gruppe

$Group = Get-MsolGroup -SearchString "Schumir TecTeam"
#Filtern der SuS. Geht auf Jobtitle.
$BenutzerName = Get-AzureADGroupMember -ObjectId $Group.ObjectId | ? {$_.JobTitle -eq "SuS" -or "SuS - TecTeam"}


foreach ($Benutzer in $BenutzerName)

{
    set-msoluser -UserPrincipalName $Benutzer.UserPrincipalName -Title "SuS - TecTeam"
    Write-Host -ForegroundColor Green $Benutzer.DisplayName "in TecTeam aufgenommen."


}

$BenutzerName = ""
$Benutzer = ""



#Verbindungen M365 schliessen
Disconnect-AzureAD 

#end logging
Stop-Transcript


################# Endo #######################################


